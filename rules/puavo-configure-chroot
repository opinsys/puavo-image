#!/bin/sh

set -eu

cleanup() {
  do_umounts 2>/dev/null || true
}

do_apply_buildrules() {
  buildrule_dirs=$1; shift

  puavo_configure_image --cleanup-buildrules "$@"

  rule_updates=$(puavo_configure_image --get-config-value rule-updates \
                   2>/dev/null || true)

  case "$rule_updates" in
    from-filesystem)
      puavo_configure_image --update-buildrules-from-filesystem \
                            --buildrule-dirs "$buildrule_dirs"
      ;;
    *)
      do_update_buildrules_from_buildhost "$buildrule_dirs"
      ;;
  esac

  puavo_configure_image --apply-buildrules "$@"
}

do_bootstrap() {
  image_configure_script=$1; shift

  test -n "$image_configure_script" || usage

  if [ ! -e "$image_configure_script" ]; then
    echo "There is no configure script on path '${image_configure_script}'" >&2
    return 1
  fi

  install -o root -g root -m 755 "$image_configure_script" \
                                 "${target_dir}/root/puavo-configure-image"

  puavo_configure_image --bootstrap "$@"
}

do_install_packages() {
  package_dirs=$1; shift

  rm -f ${target_dir}/var/tmp/puavo-build-debs/*

  there_are_packages_to_install=false

  for package_dir in $package_dirs; do
    mkdir -p "${target_dir}/var/tmp/puavo-build-debs"
    for deb in ${package_dir}/*.deb; do
      test -e "$deb" || continue
      cp "$deb" "${target_dir}/var/tmp/puavo-build-debs"
      there_are_packages_to_install=true
    done
  done

  if $there_are_packages_to_install; then
    puavo_configure_image --install-packages "$@"
    rm -f ${target_dir}/var/tmp/puavo-build-debs/*
  fi
}

do_mounts() {
  test -d "$target_dir" || return 0

  mount -o bind /dev     "${target_dir}/dev"
  mount -o bind /dev/pts "${target_dir}/dev/pts"
  mount -o bind /proc    "${target_dir}/proc"
  mount -o bind /sys     "${target_dir}/sys"
}

do_umounts() {
  test -d "$target_dir" || return 0

  # umount -l or -f ?  (XXX -f did not seem to work)
  umount -l "${target_dir}/dev/pts"
  umount -l "${target_dir}/dev"
  umount -l "${target_dir}/proc"
  umount -l "${target_dir}/sys"
}

do_update_buildrules_from_buildhost() {
  buildrule_dirs=$1; shift

  for dir in $(echo "$buildrule_dirs" | tr , ' '); do
    if [ -d "$dir" ]; then
      tar -C "$dir" --exclude .gitignore -cf - debseeds puppet \
        | puavo_configure_image --update-buildrules-from-buildhost \
                                "$@"
    fi
  done
}

ensure_target_dir() {
  test -n "$target_dir" || usage

  if [ ! -d "$target_dir" ]; then
    echo "There is no directory on path '${target_dir}'" >&2
    return 1
  fi
}

run_with_setarch() {
  chroot_arch=$(chroot "$target_dir" /root/puavo-configure-image --get-arch)

  case "$chroot_arch" in
    amd64) setarch x86_64         "$@" ;;
    *    ) setarch "$chroot_arch" "$@" ;;
  esac
}

puavo_configure_image() {
  do_mounts
  run_with_setarch env DEBIAN_FRONTEND=noninteractive DISABLE_DAEMONS=1 \
    chroot "$target_dir" /root/puavo-configure-image "$@"
  do_umounts
}

usage() {
  cat >&2 <<'EOF' 
Usage:
  puavo-configure-chroot --bootstrap
                         --target-dir target-dir
                         --image-configure-script image-configure-script
                         -- (image-configure-script args)
  puavo-configure-chroot --apply-buildrules
                         --target-dir target-dir
                         --buildrule-dirs buildrule-dirs
                         --buildrules buildrules
                         -- (image-configure-script args)
  puavo-configure-chroot --install-packages package-dirs
                         --target-dir target-dir
                         -- (image-configure-script args)
  puavo-configure-chroot --wipe-chroot --target-dir target-dir
  puavo-configure-chroot --target-dir target-dir
                         -- (image-configure-script args)
EOF
  exit 1
}

trap cleanup 0 INT TERM

if ! args=$(getopt -n "$0" -o + \
              -l 'apply-buildrules,bootstrap,buildrule-dirs:,image-configure-script:,install-packages:,target-dir:,wipe-chroot' \
              -- "$@"); then
  usage
fi

action=
buildrule_dirs=
image_configure_script=
package_dirs=
target_dir=

eval "set -- $args"

while [ $# -ne 0 ]; do
  case "$1" in
    --apply-buildrules \
    | --bootstrap      \
    | --wipe-chroot)
      action=${1#--}; shift
      ;;
    --install-packages)
      package_dirs=$2; shift; shift
      action=install-packages
      ;;

    --buildrule-dirs)
      buildrule_dirs=$2; shift; shift
      ;;
    --image-configure-script)
      image_configure_script=$2; shift; shift
      ;;
    --target-dir)
      target_dir=$2; shift; shift
      ;;
    --)
      shift; break
      ;;
    *)
      usage
      ;;
  esac
done

if [ "$action" != 'wipe-chroot' ]; then
  ensure_target_dir
fi

case "$action" in
  '')
    puavo_configure_image "$@"
    ;;
  apply-buildrules)
    do_apply_buildrules "$buildrule_dirs" "$@"
    ;;
  bootstrap)
    do_bootstrap "$image_configure_script" "$@"
    ;;
  install-packages)
    do_install_packages "$package_dirs" "$@"
    ;;
  wipe-chroot)
    if [ -d "$target_dir" ]; then
      do_umounts 2>/dev/null || true
      rm -rf "$target_dir"
    fi
    ;;
  *)
    echo "Unknown action: '$action'" >&2
    usage
    ;;
esac
