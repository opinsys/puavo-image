#!/bin/sh

set -eu

apply_debseeds() {
  imagetype=$(get_imagetype)

  debconf_seeds_file="/etc/puavo-image-build/rules/debseeds/${imagetype}" 
  if [ ! -e "$debconf_seeds_file" ]; then
    echo "Could not find a debconf seed file for image '${imagetype}'" >&2
    return 1
  fi

  debconf-set-selections < "$debconf_seeds_file"
}

apply_puppet_rules() {
  error_on_change=$1
  buildrule_args=$2
  
  puppet_classes=$(get_and_cache_puppet_classes "$buildrule_args")

  if $error_on_change; then
    another_ok_puppetcode=0
  else
    another_ok_puppetcode=2
  fi

  logfile_path="/var/log/puppet/puavo-build-image-$(date +%Y-%m-%d-%H%M%S).log"
  env LANG=en_US.UTF-8                                          \
      puppet apply                                              \
             --detailed-exitcodes                               \
             --logdest console                                  \
             --execute "include $puppet_classes"                \
             --modulepath "/etc/puavo-image-build/rules/puppet" \
    || [ $? -eq $another_ok_puppetcode ]
}

do_apply_buildrules() {
  buildrule_args=$1

  apply_debseeds
  apply_puppet_rules false "$buildrule_args"
  apply_puppet_rules true  "$buildrule_args"
}

do_apt_dist_upgrade() {
  do_apt_update
  apt-get -y -o Dpkg::Options::="--force-confold" dist-upgrade
  apt-get -y clean # to preserve space
}

do_apt_update() {
  apt-get -y update
}

do_bootstrap() {
  apt_proxy=$1
  imagetype=$2
  mirror=$3

  if [ -z "$imagetype" ]; then
    echo 'Imagetype is not set' >&2
    usage
  fi

  if [ -n "$apt_proxy" ]; then
    distribution=$(lsb_release -cs)

    if [ -z "$mirror" ]; then
      echo 'Mirror is not set' >&2
      usage
    fi

    cat <<EOF > /etc/apt/apt.conf.d/00imagebuild-proxy
acquire::http::proxy "http://$apt_proxy";
EOF
    # url in sources.list may be with proxy-prefix, so now clean this up:
    cat <<EOF > /etc/apt/sources.list
deb http://${mirror}/ubuntu $distribution main restricted universe multiverse
EOF
  fi

  cat <<'EOF' > /usr/sbin/policy-rc.d
#!/bin/sh
[ "$DISABLE_DAEMONS" != "" ] && exit 101
EOF
  chmod 755 /usr/sbin/policy-rc.d

  apt-get update
  apt-get -y install linux-image-generic

  (
    cd /boot
    for vmlinuz in vmlinuz-*; do
      test -e "$vmlinuz" || break
      kernel_version=${vmlinuz##vmlinuz-}
      ln -s "vmlinuz-$kernel_version"    vmlinuz
      ln -s "initrd.img-$kernel_version" initrd.img
    done
  )

  mkdir -p /etc/ltsp /etc/puavo-image-build/rules
  apt-get -qq -y install language-pack-en puppet-common

  echo "$imagetype" > /etc/puavo-image-build/imagetype
}

do_cleanup_buildrules() {
  rm -rf /etc/puavo-image-build/rules/*
}

do_install_packages() {
  # use gdebi instead of dpkg, dpkg is dumb with dependencies
  apt-get -y install gdebi-core
  gdebi -n /var/tmp/puavo-build-debs/*
}

do_prepare_image() {
  image_release_name=$1

  run_updatedb
  set_image_release "$image_release_name"
  make_release_logos
}

get_arch() { dpkg --print-architecture; }

run_updatedb() {
  if [ -x /usr/bin/updatedb ]; then
    echo 'Running updatedb'
    updatedb
  fi
}

set_image_release() {
  image_release_name=$1

  build_date=$(date +%Y-%m-%d-%H%M%S)
  build_version="$(get_imagetype)-${build_date}"
  image_filename="${build_version}-$(get_arch).img"

  if [ -n "$image_release_name" ]; then
    new_release_name=$image_release_name
  else
    old_release_name=$(
      cat /etc/ltsp/this_ltspimage_release 2>/dev/null || true)

    while true; do
      read -p "Release name [${old_release_name}]: " new_release_name
      new_release_name=${new_release_name:-${old_release_name}}
      [ -n "$new_release_name" ] && break
      echo 'Give a release name!' >&2
    done
  fi

  echo "$image_filename"   > /etc/ltsp/this_ltspimage_name
  echo "$new_release_name" > /etc/ltsp/this_ltspimage_release
}

make_release_logos() {
  if [ -x usr/lib/puavo-ltsp-client/puavo-make-release-logos ]; then
    echo "Making release logos..."
    /usr/lib/puavo-ltsp-client/puavo-make-release-logos
  fi
}

do_set_root_passwd() {
  while true; do
    read -p 'Set root password [y/N] ? ' do_set_rootpw
    case "$do_set_rootpw" in
       '')         break ;;
      Y|y) passwd; break ;;
      N|n)         break ;;
        *) echo 'Simple question, simple answer please!' >&2 ;;
    esac
  done
}

do_update_buildrules_from_buildhost() {
  # read from stdin
  tar --no-same-owner --no-same-permissions \
      -C /etc/puavo-image-build/rules -kxf -
}

do_update_buildrules_from_packages() {
  packages=$1
  buildrule_dirs=$2

  do_cleanup_buildrules

  apt-get -y update
  apt-get -y install $(strip_commas "$packages")

  for dir in $(strip_commas "$buildrule_dirs"); do
    for subdir in debseeds puppet; do
      if [ -d "${dir}/${subdir}" ]; then
        cp -nR "${dir}/${subdir}" /etc/puavo-image-build/rules/
      fi
    done
  done
}

get_and_cache_puppet_classes() {
  puppet_classes=$1

  puppet_classes_cache_path=/etc/puavo-image-build/puppet_classes
  if [ -z "$puppet_classes" ]; then
    puppet_classes="$(cat "$puppet_classes_cache_path" 2>/dev/null || true)"
    if [ -z "$puppet_classes" ]; then
      echo 'Puppet classes are not set' >&2
      return 1
    fi
  fi

  echo "$puppet_classes" | tee "$puppet_classes_cache_path"
}

get_imagename() { cat /etc/ltsp/this_ltspimage_name; }

get_imagetype() {
  if [ -z "$imagetype" ]; then
    imagetype=$(cat /etc/puavo-image-build/imagetype 2>/dev/null || true)
  fi

  if [ -z "$imagetype" ]; then
    echo 'Could not determine imagetype' >&2
    return 1
  fi

  echo "$imagetype"
}

strip_commas() { echo "$1" | tr , ' '; }

usage() {
  cat >&2 <<'EOF'
Usage:
  puavo-configure-image --apply-buildrules
                        --buildrule-args buildrule-args
  puavo-configure-image --apt-dist-upgrade
  puavo-configure-image --apt-update
  puavo-configure-image --bootstrap --imagetype imagetype
                        --apt-proxy apt-proxy
                        --mirror mirror
  puavo-configure-image --cleanup-buildrules
  puavo-configure-image --get-arch
  puavo-configure-image --get-imagename
  puavo-configure-image --get-imagetype
  puavo-configure-image --install-packages
  puavo-configure-image --prepare-image [--image-release image-release]
  puavo-configure-image --set-root-passwd
  puavo-configure-image --update-buildrules-from-buildhost
  puavo-configure-image --update-buildrules-from-packages packages
                        --buildrule-dirs buildrule-dirs

EOF
  exit 1
}

if ! args=$(getopt -n "$0" -o + -l 'apply-buildrules,apt-dist-upgrade,apt-proxy:,apt-update,bootstrap,buildrule-args:,cleanup-buildrules,get-arch,get-imagename,get-imagetype,image-release:,imagetype:,install-packages,mirror:,prepare-image,set-root-passwd,shell,update-buildrules-from-buildhost,update-buildrules-from-packages:' -- "$@"); then
  usage
fi

action=
apt_proxy=
buildrule_args=
buildrule_dirs=
buildrule_packages=
image_release_name=
imagetype=
mirror=

eval "set -- $args"

while [ $# -ne 0 ]; do
  case "$1" in
    --apply-buildrules     \
    | --apt-dist-upgrade   \
    | --apt-update         \
    | --bootstrap          \
    | --cleanup-buildrules \
    | --get-arch           \
    | --get-imagename      \
    | --get-imagetype      \
    | --install-packages   \
    | --prepare-image      \
    | --set-root-passwd    \
    | --shell              \
    | --update-buildrules-from-buildhost)
      action=${1#--}; shift
      ;;
    --update-buildrules-from-packages)
      buildrule_packages=$2; shift; shift
      action=update-buildrules-from-packages
      ;;

    --apt-proxy)
      apt_proxy=$2; shift; shift
      ;;
    --buildrule-args)
      buildrule_args=$2; shift; shift
      ;;
    --buildrule-dirs)
      buildrule_dirs=$2; shift; shift
      ;;
    --image-release)
      image_release_name=$2; shift; shift
      ;;
    --imagetype)
      imagetype=$2; shift; shift
      ;;
    --mirror)
      mirror=$2; shift; shift
      ;;
    --)
      shift; break
      ;;
    *)
      usage
      ;;
  esac
done

case "$action" in
  apply-buildrules)
    do_apply_buildrules "$buildrule_args"
    ;;
  apt-dist-upgrade)
    do_apt_dist_upgrade
    ;;
  apt-update)
    do_apt_update
    ;;
  bootstrap)
    do_bootstrap "$apt_proxy" "$imagetype" "$mirror"
    ;;
  cleanup-buildrules)
    do_cleanup_buildrules
    ;;
  get-arch)
    get_arch
    ;;
  get-imagename)
    get_imagename
    ;;
  get-imagetype)
    get_imagetype
    ;;
  install-packages)
    do_install_packages
    ;;
  prepare-image)
    do_prepare_image "$image_release_name"
    ;;
  set-root-passwd)
    do_set_root_passwd
    ;;
  shell)
    bash
    ;;
  update-buildrules-from-buildhost)
    do_update_buildrules_from_buildhost
    ;;
  update-buildrules-from-packages)
    do_update_buildrules_from_packages "$packages" "$buildrule_dirs"
    ;;
  *)
    echo "Unknown action: '$action'" >&2
    usage
    ;;
esac
